/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateProductMetaArgs } from "./CreateProductMetaArgs";
import { UpdateProductMetaArgs } from "./UpdateProductMetaArgs";
import { DeleteProductMetaArgs } from "./DeleteProductMetaArgs";
import { ProductMetaFindManyArgs } from "./ProductMetaFindManyArgs";
import { ProductMetaFindUniqueArgs } from "./ProductMetaFindUniqueArgs";
import { ProductMeta } from "./ProductMeta";
import { Locale } from "../../locale/base/Locale";
import { Product } from "../../product/base/Product";
import { ProductMetaService } from "../productMeta.service";

@graphql.Resolver(() => ProductMeta)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ProductMetaResolverBase {
  constructor(
    protected readonly service: ProductMetaService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ProductMeta",
    action: "read",
    possession: "any",
  })
  async _productMetasMeta(
    @graphql.Args() args: ProductMetaFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ProductMeta])
  @nestAccessControl.UseRoles({
    resource: "ProductMeta",
    action: "read",
    possession: "any",
  })
  async productMetas(
    @graphql.Args() args: ProductMetaFindManyArgs
  ): Promise<ProductMeta[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ProductMeta, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProductMeta",
    action: "read",
    possession: "own",
  })
  async productMeta(
    @graphql.Args() args: ProductMetaFindUniqueArgs
  ): Promise<ProductMeta | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductMeta)
  @nestAccessControl.UseRoles({
    resource: "ProductMeta",
    action: "create",
    possession: "any",
  })
  async createProductMeta(
    @graphql.Args() args: CreateProductMetaArgs
  ): Promise<ProductMeta> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        locale: args.data.locale
          ? {
              connect: args.data.locale,
            }
          : undefined,

        product: args.data.product
          ? {
              connect: args.data.product,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductMeta)
  @nestAccessControl.UseRoles({
    resource: "ProductMeta",
    action: "update",
    possession: "any",
  })
  async updateProductMeta(
    @graphql.Args() args: UpdateProductMetaArgs
  ): Promise<ProductMeta | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          locale: args.data.locale
            ? {
                connect: args.data.locale,
              }
            : undefined,

          product: args.data.product
            ? {
                connect: args.data.product,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductMeta)
  @nestAccessControl.UseRoles({
    resource: "ProductMeta",
    action: "delete",
    possession: "any",
  })
  async deleteProductMeta(
    @graphql.Args() args: DeleteProductMetaArgs
  ): Promise<ProductMeta | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Locale, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Locale",
    action: "read",
    possession: "any",
  })
  async locale(@graphql.Parent() parent: ProductMeta): Promise<Locale | null> {
    const result = await this.service.getLocale(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Product, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  async product(
    @graphql.Parent() parent: ProductMeta
  ): Promise<Product | null> {
    const result = await this.service.getProduct(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
