/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateProductVariantArgs } from "./CreateProductVariantArgs";
import { UpdateProductVariantArgs } from "./UpdateProductVariantArgs";
import { DeleteProductVariantArgs } from "./DeleteProductVariantArgs";
import { ProductVariantFindManyArgs } from "./ProductVariantFindManyArgs";
import { ProductVariantFindUniqueArgs } from "./ProductVariantFindUniqueArgs";
import { ProductVariant } from "./ProductVariant";
import { Price } from "../../price/base/Price";
import { Product } from "../../product/base/Product";
import { ProductVariantService } from "../productVariant.service";

@graphql.Resolver(() => ProductVariant)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ProductVariantResolverBase {
  constructor(
    protected readonly service: ProductVariantService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ProductVariant",
    action: "read",
    possession: "any",
  })
  async _productVariantsMeta(
    @graphql.Args() args: ProductVariantFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ProductVariant])
  @nestAccessControl.UseRoles({
    resource: "ProductVariant",
    action: "read",
    possession: "any",
  })
  async productVariants(
    @graphql.Args() args: ProductVariantFindManyArgs
  ): Promise<ProductVariant[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ProductVariant, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProductVariant",
    action: "read",
    possession: "own",
  })
  async productVariant(
    @graphql.Args() args: ProductVariantFindUniqueArgs
  ): Promise<ProductVariant | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductVariant)
  @nestAccessControl.UseRoles({
    resource: "ProductVariant",
    action: "create",
    possession: "any",
  })
  async createProductVariant(
    @graphql.Args() args: CreateProductVariantArgs
  ): Promise<ProductVariant> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        price: args.data.price
          ? {
              connect: args.data.price,
            }
          : undefined,

        product: args.data.product
          ? {
              connect: args.data.product,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductVariant)
  @nestAccessControl.UseRoles({
    resource: "ProductVariant",
    action: "update",
    possession: "any",
  })
  async updateProductVariant(
    @graphql.Args() args: UpdateProductVariantArgs
  ): Promise<ProductVariant | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          price: args.data.price
            ? {
                connect: args.data.price,
              }
            : undefined,

          product: args.data.product
            ? {
                connect: args.data.product,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductVariant)
  @nestAccessControl.UseRoles({
    resource: "ProductVariant",
    action: "delete",
    possession: "any",
  })
  async deleteProductVariant(
    @graphql.Args() args: DeleteProductVariantArgs
  ): Promise<ProductVariant | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Price, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Price",
    action: "read",
    possession: "any",
  })
  async price(@graphql.Parent() parent: ProductVariant): Promise<Price | null> {
    const result = await this.service.getPrice(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Product, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  async product(
    @graphql.Parent() parent: ProductVariant
  ): Promise<Product | null> {
    const result = await this.service.getProduct(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
